#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define endl "\n"
#define F first
#define S second
#define mod 1000000007
#define ll long long int
#define ld long double
#define fr(i,n) for(ll i=0;i<n;i++)
#define rep(i,a,b) for(int i=a;i<=b;i++)
#define pb push_back
#define aut std::vector<ll>::iterator
#define rssort(s) sort(s.begin(),s.end(),greater<char>())
#define si(s) stoi(s)
#define is(n) to_string(n)
#define shit ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define ks(n) cout << "Case #" << n+1 <<": "
#define test ll t; cin >> t; while(t--)
#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>
#define MAXN   300002
#define null NULL
#define ve(v) v.begin(),v.end()

using namespace std;
using namespace __gnu_pbds;

struct node{

  int d;
  struct node* n;
  struct node* l;
};
struct node* m = (struct node*)malloc(sizeof(struct node));



void solve1(int k, struct node** hea){
struct node* p = (struct node*)malloc(sizeof(struct node));
 p->d = k; p->n = (*hea);
 *hea = p;
}
void del(int k,struct node* hea){
struct node* p = (struct node*)malloc(sizeof(struct node));
 while(hea ->d != k){
    p = hea;
    hea = hea->n;
 }
 p->n = hea->n;
 delete hea;
}


void solve(int k){
  m->d = k;
  m->n = (struct node*)malloc(sizeof(struct node));
  struct node* p = m;
  m = m->n;
  m->l =p;
  m->n = null;
}

int main(){

    shit;

    struct node* hea = m;
    m->n = null;
    m->l =null;

    solve(6);
    solve(7);
    solve(8);
    solve(9);
    while(hea->n != null){
        cout << (hea->d);
        hea = hea->n;
    }
    while(hea->l != null){
    hea = hea->l;
    cout << (hea->d);
     }
}
