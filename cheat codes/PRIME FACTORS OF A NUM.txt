int ps[MAXN]; 
  
void sieve() 
{ 
    ps[1] = 1; 
    for (int i=2; i<MAXN; i++) 
  
        ps[i] = i; 
  
    for (int i=4; i<MAXN; i+=2) 
        ps[i] = 2; 
  
    for (int i=3; i*i<MAXN; i++) 
    { 
        if (ps[i] == i) 
        { 
            for (int j=i*i; j<MAXN; j+=i) 
  
                if (ps[j]==j) 
                    ps[j] = i; 
        } 
    } 
} 
  
vector<int> getFactorization(int x) 
{ 
    vector<int> ret; 
    while (x != 1) 
    { 
        ret.push_back(ps[x]); 
        x = x / ps[x]; 
    } 
    return ret; 
} 
  
int main(int argc, char const *argv[]) 
{ 
    sieve(); 
    int x = 12246; 
    cout << "prime factorization for " << x << " : "; 
  
    vector <int> p = getFactorization(x); 
  
    for (int i=0; i<p.size(); i++) 
        cout << p[i] << " "; 
    cout << endl; 
    return 0; 
} 
